# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    #database_host: "%db_host%"
    #database_port: "%db_port%"
    #database_name: "%db_name%"
    #database_user: "%db_user%"
    #database_password: "%db_password%"
    mailer_transport: "%mail_transport%"
    mailer_host: "%mail_host%"
    mailer_user: "%mail_user%"
    mailer_password: "%mail_password%"
    secret: "%secret_param%"
    locale: 'en'
    fixtures_img_directory: '%kernel.project_dir%/src/DataFixtures/images'
    tricks_img_directory: '%kernel.project_dir%/public/uploads/images/tricks'
    avatars_directory: '%kernel.project_dir%/public/uploads/images/users'
    homepage_tricks_load_limit : 5
    trick_page_messages_load_limit : 10

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $homeTricksLoadLimit: '%homepage_tricks_load_limit%'
            $trickPageMsgLimit: '%trick_page_messages_load_limit%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #App\Entity\Media:
    #    calls:
    #        - method: setLogger
    #    arguments:
    #        - '@logger'

    tools:
        class: App\Utils\Tools

    password_manager:
        class: App\Service\PasswordManager
        arguments:
          - "@tools"

    registration_manager:
        class: App\Service\RegistrationManager
        arguments:
          - "@tools"

imports:
    - { resource: './parameters_dev.yaml', ignore_errors: true }
    - { resource: './parameters.yaml', ignore_errors: true }