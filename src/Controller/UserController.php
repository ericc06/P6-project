<?php

// src/Controller/UserController.php

namespace App\Controller;

use App\Entity\User;
use App\Form\UserType;
use App\Service\UserManager;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

class UserController extends Controller
{
    private $userManager;

    public function __construct(UserManager $userManager)
    {
        $this->userManager = $userManager;
    }

    /**
     * User registration form.
     *
     * @Route("/registration", name="user_registration")
     */
    public function add(Request $request, LoggerInterface $logger)
    {
        $session = $request->getSession();

        // On crée un objet User
        $user = new User();

        // On crée le formulaire
        $form = $this->createForm(UserType::class, $user);

        $flashBag = "";
        foreach ($session->getFlashBag()->all() as $type => $messages) {
            foreach ($messages as $message) {
                $flashBag .= '<div class="flash-' . $type . '">' . $message . '</div>';
            }
        }

        // Si la requête est en POST
        if ($request->isMethod('POST')) {
            // À partir de maintenant, la variable $user contient les valeurs entrées dans le formulaire par le visiteur
            $form->handleRequest($request);

            // On vérifie que les valeurs entrées sont correctes
            if ($form->isValid()) {
                $this->userManager->persistUser($user);

                if (true === $this->userManager->sendValidationEmail($user, $request)) {
                    /*return $this->render('index.html.twig', array(
                        'nom' => 'dev',
                        'flashBag' => $flashBag
                    ));*/
                    return $this->redirectToRoute('homepage');
                } else {
                    return $this->render('user/add.html.twig', array(
                        'form' => $form->createView(),
                        'flashBag' => $flashBag,
                    ));
                    //return $this->redirectToRoute('user_registration');
                }
            }
        }

        // À ce stade, le formulaire n'est pas valide car :
        // - Soit la requête est de type GET, donc le visiteur vient d'arriver sur la page et veut voir le formulaire
        // - Soit la requête est de type POST, mais le formulaire contient des valeurs invalides, donc on l'affiche de nouveau

        return $this->render('user/add.html.twig', array(
            'form' => $form->createView(),
            'flashBag' => $flashBag,
        ));
    }

    /**
     * User account validation.
     *
     * @Route("/registration-confirm", name="registration_confirm")
     */
    public function confirmAccount(Request $request)
    {
        if (true === $this->userManager->confirmUserRegistration($request)) {
            return $this->redirectToRoute('homepage');
        } else {
            return $this->redirectToRoute('user_registration');
        }
    }

    /**
     * User profile modification form.
     *
     * @Route("/edit-profile", name="user_profile_edition")
     */
    public function edit(Request $request/*,UserPasswordEncoderInterface $encoder*/)
    {
        // TODO
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/login", name="user_login")
     */
    public function login(AuthenticationUtils $authenticationUtils): Response
    {
        $data = $this->userManager->initLoginForm($authenticationUtils);

        return $this->render(
            'user/login.html.twig',
            [
                'last_username' => $data['lastUsername'],
                'error' => $data['error'],
            ]
        );
    }

    /**
     * @Route("/logout", name="user_logout")
     */
    public function logout(): void
    {
        throw new \Exception('This should never be reached!');
    }
}
