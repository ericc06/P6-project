<?php
// src/Service/UserManager.php
namespace App\Service;

use App\Entity\User;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Component\Config\Definition\Exception\Exception;

//use Symfony\Component\Validator\Constraints\DateTime;

class UserManager extends Controller
{
    protected $container;
    private $encoder;
    private $mailer;
    private $entMan;

    public function __construct(
        Container $container,
        UserPasswordEncoderInterface $encoder,
        \Swift_Mailer $mailer
    ) {
        $this->container = $container;
        $this->encoder = $encoder;
        $this->mailer = $mailer;
        $this->entMan = $this->getDoctrine()->getManager();
    }

    /**
     * @return string
     */
    /*
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    */

    // Inserts or updates a user into the database.
    public function saveUserToDB(User $user)
    {
        $result = [];

        try {
            $this->entMan->persist($user);
            $this->entMan->flush();

            $result['is_successful'] = true;
            $result['msg_type'] = 'success';
            $result['message'] = 'profile_saved_successfully';
            $result['message_params'] = [];
            $result['dest_page'] = 'homepage';
        } catch (UniqueConstraintViolationException $e) {
            $result['is_successful'] = false;
            $result['msg_type'] = 'danger';
            $result['message'] = 'email_address_already_exists';
            $result['message_params'] = [
                '%link_start%' => '<a href="'
                    . $this->generateUrl('user_edit', [
                        'id' => $this->entMan->getRepository(User::class)
                            ->findByUsername($user->getUsername())[0]->getId()
                    ]) . '">',
                '%link_end%' => '</a>'
            ];
            $result['dest_page'] = 'user_edit';
            $result['user'] = $user;
        }

        return $result;
    }

    // Deletes a user from the database.
    public function deleteUserFromDB(User $user)
    {
        $this->entMan->remove($user);
        $this->entMan->flush();
    }

    // Initializes the login form.
    public function initLoginForm(AuthenticationUtils $authenticationUtils)
    {
        // dernier identifiant de connexion utilisÃ©
        $lastUsername = $authenticationUtils->getLastUsername();
        // erreur d'authentification (s'il y en a une)
        $error = $authenticationUtils->getLastAuthenticationError();

        return [
            'lastUsername' => $lastUsername,
            'error' => $error,
        ];
    }
}
