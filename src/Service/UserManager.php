<?php
// src/Service/UserManager.php

namespace App\Service;

use App\Entity\User;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Component\Config\Definition\Exception\Exception;

//use Symfony\Component\Validator\Constraints\DateTime;

class UserManager extends Controller
{
    private $logger;

    public function __construct(
        LoggerInterface $logger,
        UserPasswordEncoderInterface $encoder,
        Container $container,
        \Swift_Mailer $mailer
    ) {
        $this->logger = $logger;
        $this->encoder = $encoder;
        $this->container = $container;
        $this->mailer = $mailer;
        $this->em = $this->getDoctrine()->getManager();
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    // Inserts or updates a user into the database.
    public function saveUserToDB(User $user)
    {
        $this->em->persist($user);
        $this->em->flush();
    }

    // Deletes a user from the database.
    public function deleteUserFromDB(User $user)
    {
        $this->em->remove($user);
        $this->em->flush();
    }

    // Returns an encoded user password.
    public function generateEncodedPwd(User $user, String $pwd)
    {
        return $this->encoder->encodePassword($user, $pwd);
    }

    // Generates and returns a token.
    public function generateToken()
    {
        return random_int(1000000000, 9999999999);
    }

    // Inserts a non existing (or still inactive) user account into the database.
    // If an inactive account exists for the given email, it is deleted end recreated.
    // Returns true if an account has been (re)created.
    // Returns false if an active account alresady exists.
    public function persistUserRegistration(User $user)
    {
        $this->logger->info('IN persistUser  <<<<<<<<<<<<');

        $userRepository = $this->getDoctrine()->getRepository(User::class);

        // Recherche d'un compte utilisateur à partir de l'adresse e-mail
        // pour éviter de créer le compte une seconde fois.
        // On vérifie aussi l'unicité du nom d'utilisateur (username).
        // S'il existe un compte encore inactif, on le supprime et on le recrée.
        // S'il existe un compte actif, on invite l'utilisateur à se connecter.

        $userAccountAlreadyExists = false;
        $usernameAlreadyUsed = false;

        $existingUserAccount = $userRepository->findOneByEmail($user->getEmail());

        if ($existingUserAccount) {
            if (!$existingUserAccount->getIsActiveAccount()) {
                $this->deleteUserFromDB($existingUserAccount);
            } else {
                throw new Exception('account_already_exists', 1);
            }
        } elseif ($userRepository->findOneByUsername($user->getUsername())) {
            throw new Exception('username_already_exists', 2);
        }

        $user->setPassword($this->generateEncodedPwd($user, $user->getPassword()));
        $user->setIsActiveAccount(false);
        $user->setActivationToken($this->generateToken());
        $user->setRoles(["ROLE_USER"]);

        $this->saveUserToDB($user);

        return true;
    }

    // Sends the user account creation verification email to the user.
    // Returns true if the email was successfully sent.
    // Returns false if the email could not be sent.
    public function sendValidationEmail(User $user)
    {
        $validation_url = $this->generateUrl(
            'registration_confirm',
            [
                'm' => $user->getEmail(),
                't' => $user->getActivationToken(),
            ],
            UrlGeneratorInterface::ABSOLUTE_URL
        );

        $message = (new \Swift_Message("Demande de confirmation d'inscription"))
            ->setFrom('contact@monsite.loc')
            ->setTo('eric.codron@gmail.com')
        ;

        $data = [
            'userName' => $user->getUsername(),
            'validationUrl' => $validation_url,
            'image_src' => $message->embed(\Swift_Image::fromPath(realpath(__DIR__ . "\\..\\..\\") . "\\public\\build\\images\\emails\\homepage-500.jpg")),
        ];

        $message->setBody(
            $this->renderView('emails/registration.html.twig', $data),
            'text/html'
        );

        $result = $this->mailer->send($message);

        if (0 !== $result) {
            return true;
        } else {
            // En cas d'échec d'envoi du mail de vérification, on supprime le compte
            // pour permettre à l'utilisateur de le recréer pour renvoyer le mail.
            $userToDelete = $this->getDoctrine()->getRepository(User::class)->findOneByEmail($user->getEmail());

            if ($userToDelete) {
                $this->deleteUserFromDB($user);
            }
            throw new Exception('error_sending_confirmation_email');
        }
    }

    // Performs the actions required after a user add form submission.
    // Returns an array with the relevant pieces of information.
    public function checkAddUser(User $user)
    {
        $result = [];

        try {
            self::persistUserRegistration($user);
        } catch (Exception $e) {
            switch ($e->getCode()) {
                // account_already_exists
                case 1:
                    $result['msg_type'] = 'primary';
                    $result['message'] = $e->getMessage();
                    $result['dest_page'] = 'user_login';
                    break;
                // username_already_exists
                case 2:
                    $result['msg_type'] = 'danger';
                    $result['message'] = $e->getMessage();
                    $result['dest_page'] = 'user_registration';
                    break;
                default:
                    break;
            }
            return $result;
        }

        try {
            self::sendValidationEmail($user);
            $result['msg_type'] = 'success';
            $result['message'] = 'account_creation_check_email_sent';
            $result['dest_page'] = 'homepage';
        } catch (Exception $e) {
            $result['msg_type'] = 'danger';
            $result['message'] = $e->getMessage();
            $result['dest_page'] = 'user_registration';
        }

        return $result;
    }

    // Called when a user clicks the link in the account creation verification email.
    // Checks the email address and token consistency. Activates the user account if OK.
    // Returns true if the verification is successful.
    // Returns false if the verification fails.
    public function confirmUserRegistration(Request $request)
    {
        // First we need to check the email address and token consistency.

        $user = $this->getDoctrine()->getRepository(User::class)->findOneByEmail($request->query->get('m'));

        $urlToken = $request->query->get('t');

        if ($urlToken === $user->getActivationToken()) {
            $user->setIsActiveAccount(true);
            $this->saveUserToDB($user);
        }

        if (true === $user->getIsActiveAccount()) {
            return true;
        } else {
            return false;
        }
    }

    // Sends a password reset email to the user.
    // Returns true if the email was successfully sent.
    // Returns false if the email could not be sent.
    public function sendPwdResetEmail(User $user)
    {
        $this->logger->info('> > > > > > IN sendPwdResetEmail  < < < < < <');

        // Generating the password reset verification token.
        $user->setPwdResetToken($this->generateToken());
        // Setting the token creation date to now (default for Datetime()).
        $user->setPwdTokenCreationDate(new \DateTime('now'));
        $this->saveUserToDB($user);

        $pwd_reset_url = $this->generateUrl(
            'user_new_pwd',
            [
                'm' => $user->getEmail(),
                't' => $user->getPwdResetToken(),
            ],
            UrlGeneratorInterface::ABSOLUTE_URL
        );

        $message = (new \Swift_Message("Réinitialisation de votre mot de passe."))
            ->setFrom('contact@monsite.loc')
            ->setTo('eric.codron@gmail.com')
        ;

        $data = [
            'userName' => $user->getUsername(),
            'pwdResetUrl' => $pwd_reset_url,
            'image_src' => $message->embed(\Swift_Image::fromPath(realpath(__DIR__ . "\\..\\..\\") . "\\public\\build\\images\\emails\\homepage-500.jpg")),
        ];

        $message->setBody(
            $this->renderView('emails/pwdReset.html.twig', $data),
            'text/html'
        );

        $result = $this->mailer->send($message);

        if (0 !== $result) {
            return true;
        } else {
            return false;
        }
    }

    // Called when a user clicks the link in the password reset request confirmation email.
    // Checks the email address and token consistency.
    // Returns true if the verification is successful.
    // Returns false if the verification fails.
    public function confirmPwdResetEmail(Request $request)
    {
        // We need to check the email address and reset token consistency.

        $user = $this->getDoctrine()->getRepository(User::class)->findOneByEmail($request->query->get('m'));

        $urlToken = $request->query->get('t');

        $dateNow = new \DateTime('now');
        $dateDiffInSeconds = $dateNow->getTimestamp() - $user->getPwdTokenCreationDate()->getTimestamp();

        // The token validity duration in 10 minutes (600 seconds).
        if ($urlToken === $user->getPwdResetToken() &&
            $dateDiffInSeconds < 600) {
            return true;
        } else {
            return false;
        }
    }

    // Checks that the new password and the confirmation password are the same.
    // We don't check the token duration validity anymore because the user is
    // already on the new password entry form.
    // But we delete the password reset token from the database.
    // Returns true if the verification is successful.
    // Returns false if the verification fails.
    public function checkAndSaveNewPwd(String $email, String $token, Request $request)
    {

        // TODO: Check that pwd length is < 4096 haracters
        // (https://symfony.com/doc/4.0/security/password_encoding.html)

        // For the second and last time, we check the email address and token consistency.
        $user = $this->getDoctrine()->getRepository(User::class)->findOneByEmail($email);

        if ($token === $user->getPwdResetToken() &&
            $request->get('pwd1') === $request->get('pwd2')) {
            $user->setPassword($this->generateEncodedPwd($user, $request->get('pwd1')));
            $user->setPwdResetToken(null);
            $user->setPwdTokenCreationDate(null);
            $this->saveUserToDB($user);
            return true;
        } else {
            return false;
        }
    }

    // Initializes the login form.
    public function initLoginForm(AuthenticationUtils $authenticationUtils)
    {
        // dernier identifiant de connexion utilisé
        $lastUsername = $authenticationUtils->getLastUsername();
        // erreur d'authentification (s'il y en a une)
        $error = $authenticationUtils->getLastAuthenticationError();

        return [
            'lastUsername' => $lastUsername,
            'error' => $error,
        ];
    }
}
